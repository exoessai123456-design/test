{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 49,
            "patches": [
                {
                    "date": 1751212586999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751213757978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const express = require('express');\r\n const connectDB = require('./db');\r\n const authRoutes = require('./routes/auth');\r\n \r\n+\r\n const app = express();\r\n connectDB();\r\n \r\n app.use(express.json());\r\n"
                },
                {
                    "date": 1751213764760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,16 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const connectDB = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+\r\n+\r\n+const app = express();\r\n+connectDB();\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+app.listen(process.env.PORT, () => {\r\n+  console.log(`Server running on port ${process.env.PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1751213770199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,18 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const connectDB = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+\r\n+\r\n+const app = express();\r\n+connectDB();\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+app.listen(process.env.PORT, () => {\r\n+  console.log(`Server running on port ${process.env.PORT}`);\r\n+});\r\n+\r\n+app.use(cors());\r\n"
                },
                {
                    "date": 1751218190581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,36 +14,5 @@\n app.listen(process.env.PORT, () => {\r\n   console.log(`Server running on port ${process.env.PORT}`);\r\n });\r\n \r\n-app.use(cors());\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const connectDB = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-\r\n-\r\n-const app = express();\r\n-connectDB();\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-app.listen(process.env.PORT, () => {\r\n-  console.log(`Server running on port ${process.env.PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const connectDB = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-\r\n-\r\n-const app = express();\r\n-connectDB();\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-app.listen(process.env.PORT, () => {\r\n-  console.log(`Server running on port ${process.env.PORT}`);\r\n-});\r\n+?app.use(cors());\r\n"
                },
                {
                    "date": 1751218240646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,5 +14,5 @@\n app.listen(process.env.PORT, () => {\r\n   console.log(`Server running on port ${process.env.PORT}`);\r\n });\r\n \r\n-?app.use(cors());\r\n+app.use(cors());\r\n"
                },
                {
                    "date": 1751218389235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n const cors = require('cors');\r\n \r\n \r\n const app = express();\r\n+\r\n connectDB();\r\n \r\n app.use(express.json());\r\n app.use('/api/admin', authRoutes);\r\n"
                },
                {
                    "date": 1751218395581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,15 @@\n const cors = require('cors');\r\n \r\n \r\n const app = express();\r\n-\r\n connectDB();\r\n \r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000', // allow your frontend\r\n+  credentials: true               // if using cookies or auth headers\r\n+}));\r\n+\r\n app.use(express.json());\r\n app.use('/api/admin', authRoutes);\r\n \r\n app.listen(process.env.PORT, () => {\r\n"
                },
                {
                    "date": 1751218401703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,23 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const connectDB = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+\r\n+\r\n+const app = express();\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000', \r\n+  credentials: true               \r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+app.listen(process.env.PORT, () => {\r\n+  console.log(`Server running on port ${process.env.PORT}`);\r\n+});\r\n+\r\n+app.use(cors());\r\n"
                },
                {
                    "date": 1751834460677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,27 +20,8 @@\n   console.log(`Server running on port ${process.env.PORT}`);\r\n });\r\n \r\n app.use(cors());\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const connectDB = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n \r\n \r\n-const app = express();\r\n-connectDB();\r\n \r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000', // allow your frontend\r\n-  credentials: true               // if using cookies or auth headers\r\n-}));\r\n \r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-app.listen(process.env.PORT, () => {\r\n-  console.log(`Server running on port ${process.env.PORT}`);\r\n-});\r\n-\r\n-app.use(cors());\r\n"
                },
                {
                    "date": 1751834485821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,5 +23,33 @@\n app.use(cors());\r\n \r\n \r\n \r\n+let events = [];\r\n \r\n+app.get('/api/events', (req, res) => {\r\n+  res.json(events);\r\n+});\r\n+\r\n+app.post('/api/events', (req, res) => {\r\n+  const newEvent = { id: Date.now().toString(), ...req.body };\r\n+  events.push(newEvent);\r\n+  res.status(201).json(newEvent);\r\n+});\r\n+\r\n+app.put('/api/events/:id', (req, res) => {\r\n+  const { id } = req.params;\r\n+  const index = events.findIndex(e => e.id === id);\r\n+  if (index !== -1) {\r\n+    events[index] = { id, ...req.body };\r\n+    res.json(events[index]);\r\n+  } else {\r\n+    res.status(404).json({ message: 'Event not found' });\r\n+  }\r\n+});\r\n+\r\n+app.delete('/api/events/:id', (req, res) => {\r\n+  events = events.filter(e => e.id !== req.params.id);\r\n+  res.status(204).end();\r\n+});\r\n+\r\n+app.listen(5000, () => console.log('Server running on port 5000'));\r\n"
                },
                {
                    "date": 1751835825245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,70 @@\n require('dotenv').config();\r\n const express = require('express');\r\n-const connectDB = require('./db');\r\n+const { connectDB, Event } = require('./db');\r\n const authRoutes = require('./routes/auth');\r\n const cors = require('cors');\r\n \r\n+const app = express();\r\n \r\n-const app = express();\r\n connectDB();\r\n \r\n app.use(cors({\r\n-  origin: 'http://localhost:3000', \r\n-  credentials: true               \r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n }));\r\n \r\n app.use(express.json());\r\n app.use('/api/admin', authRoutes);\r\n \r\n-app.listen(process.env.PORT, () => {\r\n-  console.log(`Server running on port ${process.env.PORT}`);\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+// GET all events\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find();\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n });\r\n \r\n-app.use(cors());\r\n-\r\n-\r\n-\r\n-let events = [];\r\n-\r\n-app.get('/api/events', (req, res) => {\r\n-  res.json(events);\r\n+// POST create event\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event(req.body);\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n });\r\n \r\n-app.post('/api/events', (req, res) => {\r\n-  const newEvent = { id: Date.now().toString(), ...req.body };\r\n-  events.push(newEvent);\r\n-  res.status(201).json(newEvent);\r\n+// PUT update event\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n+    res.json(updatedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n });\r\n \r\n-app.put('/api/events/:id', (req, res) => {\r\n-  const { id } = req.params;\r\n-  const index = events.findIndex(e => e.id === id);\r\n-  if (index !== -1) {\r\n-    events[index] = { id, ...req.body };\r\n-    res.json(events[index]);\r\n-  } else {\r\n-    res.status(404).json({ message: 'Event not found' });\r\n+// DELETE event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    await Event.findByIdAndDelete(req.params.id);\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n   }\r\n });\r\n \r\n-app.delete('/api/events/:id', (req, res) => {\r\n-  events = events.filter(e => e.id !== req.params.id);\r\n-  res.status(204).end();\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n });\r\n-\r\n-app.listen(5000, () => console.log('Server running on port 5000'));\r\n"
                },
                {
                    "date": 1751915577701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n // DELETE event\r\n app.delete('/api/events/:id', async (req, res) => {\r\n   try {\r\n-    await Event.findByIdAndDelete(req.params.id);\r\n+    //await Event.findByIdAndDelete(req.params.id);\r\n     res.status(204).end();\r\n   } catch (err) {\r\n     console.error(err);\r\n     res.status(500).json({ message: 'Error deleting event' });\r\n"
                },
                {
                    "date": 1751915591957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+// GET all events\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find();\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// POST create event\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event(req.body);\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// PUT update event\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n+    res.json(updatedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// DELETE event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    //await Event.findByIdAndDelete(req.params.id);\r\n+    await Event.findByIdAndUpdate(req.params.id, { status: 'cancelled' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1751915599206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+// GET all events\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find();\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// POST create event\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event(req.body);\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// PUT update event\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n+    res.json(updatedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// DELETE event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    //await Event.findByIdAndDelete(req.params.id);\r\n+    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1751915684369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+// GET all events\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({ status: { $ne: 'cancelled' } });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// POST create event\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event(req.body);\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// PUT update event\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n+    res.json(updatedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// DELETE event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    //await Event.findByIdAndDelete(req.params.id);\r\n+    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1751915691486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+// GET all events\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({ status: { $ne: 'CANC' } });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// POST create event\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event(req.body);\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// PUT update event\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n+    res.json(updatedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// DELETE event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    //await Event.findByIdAndDelete(req.params.id);\r\n+    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752518383940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n const express = require('express');\r\n const { connectDB, Event } = require('./db');\r\n const authRoutes = require('./routes/auth');\r\n const cors = require('cors');\r\n+const authMiddleware = require('./middleware/authMiddleware'); \r\n \r\n const app = express();\r\n \r\n connectDB();\r\n@@ -20,9 +21,9 @@\n \r\n // GET all events\r\n app.get('/api/events', async (req, res) => {\r\n   try {\r\n-    const events = await Event.find({ status: { $ne: 'CANC' } });\r\n+    const events = await Event.find({ status: { $ne: 'CANCELLED' } });\r\n     res.json(events);\r\n   } catch (err) {\r\n     console.error(err);\r\n     res.status(500).json({ message: 'Error fetching events' });\r\n@@ -68,287 +69,4 @@\n const PORT = process.env.PORT || 5000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server running on port ${PORT}`);\r\n });\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-// GET all events\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({ status: { $ne: 'cancelled' } });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// POST create event\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event(req.body);\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// PUT update event\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n-    res.json(updatedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// DELETE event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    //await Event.findByIdAndDelete(req.params.id);\r\n-    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-// GET all events\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find();\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// POST create event\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event(req.body);\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// PUT update event\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n-    res.json(updatedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// DELETE event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    //await Event.findByIdAndDelete(req.params.id);\r\n-    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-// GET all events\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find();\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// POST create event\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event(req.body);\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// PUT update event\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n-    res.json(updatedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// DELETE event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    //await Event.findByIdAndDelete(req.params.id);\r\n-    await Event.findByIdAndUpdate(req.params.id, { status: 'cancelled' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-// GET all events\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find();\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// POST create event\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event(req.body);\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// PUT update event\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n-    res.json(updatedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// DELETE event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    //await Event.findByIdAndDelete(req.params.id);\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n"
                },
                {
                    "date": 1752518439436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const authMiddleware = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752518460705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const authMiddleware = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+// Secure these routes\r\n+app.get('/api/events', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({ status: { $ne: 'CANCELLED' } });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+app.post('/api/events', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin?.email || 'unknown',\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+app.put('/api/events/:id', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n+    res.json(updatedEvent);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+app.delete('/api/events/:id', middlewaree, async (req, res) => {\r\n+  try {\r\n+    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752518467782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+// Secure these routes\r\n+app.get('/api/events', middlewaree, async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({ status: { $ne: 'CANCELLED' } });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+app.post('/api/events', middlewaree, async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin?.email || 'unknown',\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+app.put('/api/events/:id', middlewaree, async (req, res) => {\r\n+  try {\r\n+    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n+    res.json(updatedEvent);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+app.delete('/api/events/:id', middlewaree, async (req, res) => {\r\n+  try {\r\n+    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752518946648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+// Secure these routes\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752518959141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+// Use MongoDB for events instead of in-memory array\r\n+\r\n+app.get('/api/events', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    // If you want to filter by creator (only show own events), uncomment below\r\n+    // const events = await Event.find({ status: { $ne: 'CANCELLED' }, createdBy: req.admin.email });\r\n+\r\n+    // If all admins can see all events, use this:\r\n+    const events = await Event.find({ status: { $ne: 'CANCELLED' } });\r\n+\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// Create new event\r\n+app.post('/api/events', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// Update event\r\n+app.put('/api/events/:id', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n+    res.json(updatedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// Soft-delete event (mark status CANCELLED)\r\n+app.delete('/api/events/:id', middlewaree, async (req, res) => {\r\n+  try {\r\n+    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752519776482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,322 +18,11 @@\n app.use('/api/admin', authRoutes);\r\n \r\n // Use MongoDB for events instead of in-memory array\r\n \r\n-app.get('/api/events', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    // If you want to filter by creator (only show own events), uncomment below\r\n-    // const events = await Event.find({ status: { $ne: 'CANCELLED' }, createdBy: req.admin.email });\r\n \r\n-    // If all admins can see all events, use this:\r\n-    const events = await Event.find({ status: { $ne: 'CANCELLED' } });\r\n \r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n \r\n-// Create new event\r\n-app.post('/api/events', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.email\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// Update event\r\n-app.put('/api/events/:id', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n-    res.json(updatedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// Soft-delete event (mark status CANCELLED)\r\n-app.delete('/api/events/:id', middlewaree, async (req, res) => {\r\n-  try {\r\n-    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n const PORT = process.env.PORT || 5000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server running on port ${PORT}`);\r\n });\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-// Secure these routes\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-// Secure these routes\r\n-app.get('/api/events', middlewaree, async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({ status: { $ne: 'CANCELLED' } });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-app.post('/api/events', middlewaree, async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin?.email || 'unknown',\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-app.put('/api/events/:id', middlewaree, async (req, res) => {\r\n-  try {\r\n-    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n-    res.json(updatedEvent);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-app.delete('/api/events/:id', middlewaree, async (req, res) => {\r\n-  try {\r\n-    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const authMiddleware = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-// Secure these routes\r\n-app.get('/api/events', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({ status: { $ne: 'CANCELLED' } });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-app.post('/api/events', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin?.email || 'unknown',\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-app.put('/api/events/:id', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n-    res.json(updatedEvent);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-app.delete('/api/events/:id', middlewaree, async (req, res) => {\r\n-  try {\r\n-    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const authMiddleware = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const authMiddleware = require('./middleware/authMiddleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-// GET all events\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({ status: { $ne: 'CANCELLED' } });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// POST create event\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event(req.body);\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// PUT update event\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-    if (!updatedEvent) return res.status(404).json({ message: 'Event not found' });\r\n-    res.json(updatedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// DELETE event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    //await Event.findByIdAndDelete(req.params.id);\r\n-    await Event.findByIdAndUpdate(req.params.id, { status: 'CANCELLED' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n"
                },
                {
                    "date": 1752519787414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', authMiddleware);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin._id,\r\n+      status: { $ne: 'CANCELLED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin._id\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin._id },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin._id },\r\n+      { status: 'CANCELLED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752519795053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n app.use('/api/admin', authRoutes);\r\n \r\n \r\n \r\n-app.use('/api/events', authMiddleware);\r\n+app.use('/api/events', middleware);\r\n \r\n // ✅ GET all events by admin (not cancelled)\r\n app.get('/api/events', async (req, res) => {\r\n   try {\r\n"
                },
                {
                    "date": 1752519808144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin._id,\r\n+      status: { $ne: 'CANCELLED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin._id\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin._id },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin._id },\r\n+      { status: 'CANCELLED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752520063159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n app.post('/api/events', async (req, res) => {\r\n   try {\r\n     const newEvent = new Event({\r\n       ...req.body,\r\n-      createdBy: req.admin._id\r\n+      createdBy: req.admin.id\r\n     });\r\n     const savedEvent = await newEvent.save();\r\n     res.status(201).json(savedEvent);\r\n   } catch (err) {\r\n@@ -88,123 +88,4 @@\n const PORT = process.env.PORT || 5000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server running on port ${PORT}`);\r\n });\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middleware);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n-      createdBy: req.admin._id,\r\n-      status: { $ne: 'CANCELLED' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin._id\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin._id },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin._id },\r\n-      { status: 'CANCELLED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-// Use MongoDB for events instead of in-memory array\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n"
                },
                {
                    "date": 1752520477527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n // ✅ PUT update event only if belongs to this admin\r\n app.put('/api/events/:id', async (req, res) => {\r\n   try {\r\n     const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin._id },\r\n+      { _id: req.params.id, createdBy: req.admin.id },\r\n       req.body,\r\n       { new: true }\r\n     );\r\n     if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n"
                },
                {
                    "date": 1752520513526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n // ✅ GET all events by admin (not cancelled)\r\n app.get('/api/events', async (req, res) => {\r\n   try {\r\n     const events = await Event.find({\r\n-      createdBy: req.admin._id,\r\n+      createdBy: req.admin.id,\r\n       status: { $ne: 'CANCELLED' }\r\n     });\r\n     res.json(events);\r\n   } catch (err) {\r\n@@ -69,9 +69,9 @@\n // ✅ DELETE (soft delete) event\r\n app.delete('/api/events/:id', async (req, res) => {\r\n   try {\r\n     const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin._id },\r\n+      { _id: req.params.id, createdBy: req.admin.id },\r\n       { status: 'CANCELLED' }\r\n     );\r\n     if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n     res.status(204).end();\r\n"
                },
                {
                    "date": 1752939295161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.,\r\n+      status: { $ne: 'CANCELLED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.id\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.id },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.id },\r\n+      { status: 'CANCELLED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752939311053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.email,\r\n+      status: { $ne: 'CANCELLED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.id },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.id },\r\n+      { status: 'CANCELLED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752939316388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.email,\r\n+      status: { $ne: 'CANCELLED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin. },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.id },\r\n+      { status: 'CANCELLED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752939327135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.email,\r\n+      status: { $ne: 'CANCELLED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      { status: 'CANCELLED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752939716127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,372 +24,8 @@\n // ✅ GET all events by admin (not cancelled)\r\n app.get('/api/events', async (req, res) => {\r\n   try {\r\n     const events = await Event.find({\r\n-      createdBy: req.admin.email,\r\n-      status: { $ne: 'CANCELLED' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.email\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      { status: 'CANCELLED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middlewaree);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n-      createdBy: req.admin.email,\r\n-      status: { $ne: 'CANCELLED' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.email\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin. },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.id },\r\n-      { status: 'CANCELLED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middlewaree);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n-      createdBy: req.admin.email,\r\n-      status: { $ne: 'CANCELLED' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.email\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.id },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.id },\r\n-      { status: 'CANCELLED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middlewaree);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n-      createdBy: req.admin.,\r\n-      status: { $ne: 'CANCELLED' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.id\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.id },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.id },\r\n-      { status: 'CANCELLED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middlewaree);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n       createdBy: req.admin.id,\r\n       status: { $ne: 'CANCELLED' }\r\n     });\r\n     res.json(events);\r\n"
                },
                {
                    "date": 1752940853151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n // ✅ GET all events by admin (not cancelled)\r\n app.get('/api/events', async (req, res) => {\r\n   try {\r\n     const events = await Event.find({\r\n-      createdBy: req.admin.id,\r\n+      createdBy: req.admin.email,\r\n       status: { $ne: 'CANCELLED' }\r\n     });\r\n     res.json(events);\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1752940859031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n app.post('/api/events', async (req, res) => {\r\n   try {\r\n     const newEvent = new Event({\r\n       ...req.body,\r\n-      createdBy: req.admin.id\r\n+      createdBy: req.admin.email\r\n     });\r\n     const savedEvent = await newEvent.save();\r\n     res.status(201).json(savedEvent);\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1752940872110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n // ✅ PUT update event only if belongs to this admin\r\n app.put('/api/events/:id', async (req, res) => {\r\n   try {\r\n     const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.id },\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n       req.body,\r\n       { new: true }\r\n     );\r\n     if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n"
                },
                {
                    "date": 1752940881295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n // ✅ DELETE (soft delete) event\r\n app.delete('/api/events/:id', async (req, res) => {\r\n   try {\r\n     const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.id },\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n       { status: 'CANCELLED' }\r\n     );\r\n     if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n     res.status(204).end();\r\n"
                },
                {
                    "date": 1752941403264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n app.delete('/api/events/:id', async (req, res) => {\r\n   try {\r\n     const event = await Event.findOneAndUpdate(\r\n       { _id: req.params.id, createdBy: req.admin.email },\r\n-      { status: 'CANCELLED' }\r\n+      { status: 'DE' }\r\n     );\r\n     if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n     res.status(204).end();\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1752941454936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n app.get('/api/events', async (req, res) => {\r\n   try {\r\n     const events = await Event.find({\r\n       createdBy: req.admin.email,\r\n-      status: { $ne: 'CANCELLED' }\r\n+      status: { $ne: 'DE' }\r\n     });\r\n     res.json(events);\r\n   } catch (err) {\r\n     console.error(err);\r\n@@ -70,9 +70,9 @@\n app.delete('/api/events/:id', async (req, res) => {\r\n   try {\r\n     const event = await Event.findOneAndUpdate(\r\n       { _id: req.params.id, createdBy: req.admin.email },\r\n-      { status: 'DE' }\r\n+      { status: 'DELETED' }\r\n     );\r\n     if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n     res.status(204).end();\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1753204989622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.email,\r\n+      status: { $ne: 'DELETED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    \r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      { status: 'DELETED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1753205004571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.email,\r\n+      status: { $ne: 'DELETED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    scheduleEventReminder\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      { status: 'DELETED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1753205013751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.email,\r\n+      status: { $ne: 'DELETED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    scheduleEventReminder(savedEvent)\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      { status: 'DELETED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1753205042304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+\r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.email,\r\n+      status: { $ne: 'DELETED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    scheduleEventReminder(savedEvent);\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      { status: 'DELETED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1753205380646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+require('dotenv').config();\r\n+const express = require('express');\r\n+const { connectDB, Event } = require('./db');\r\n+const authRoutes = require('./routes/auth');\r\n+const cors = require('cors');\r\n+const middlewaree = require('./middleware/middleware'); \r\n+const { scheduleEventReminder } = require('./utils/reminderScheduler');\r\n+\r\n+const app = express();\r\n+\r\n+connectDB();\r\n+\r\n+app.use(cors({\r\n+  origin: 'http://localhost:3000',\r\n+  credentials: true\r\n+}));\r\n+\r\n+app.use(express.json());\r\n+app.use('/api/admin', authRoutes);\r\n+\r\n+\r\n+\r\n+app.use('/api/events', middlewaree);\r\n+\r\n+// ✅ GET all events by admin (not cancelled)\r\n+app.get('/api/events', async (req, res) => {\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.email,\r\n+      status: { $ne: 'DELETED' }\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ POST create event with createdBy\r\n+app.post('/api/events', async (req, res) => {\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    scheduleEventReminder(savedEvent);\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ PUT update event only if belongs to this admin\r\n+app.put('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// ✅ DELETE (soft delete) event\r\n+app.delete('/api/events/:id', async (req, res) => {\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      { status: 'DELETED' }\r\n+    );\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1753205462815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,101 +59,9 @@\n       { _id: req.params.id, createdBy: req.admin.email },\r\n       req.body,\r\n       { new: true }\r\n     );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      { status: 'DELETED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middlewaree);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n-      createdBy: req.admin.email,\r\n-      status: { $ne: 'DELETED' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.email\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n     scheduleEventReminder(savedEvent);\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n     if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n     res.json(event);\r\n   } catch (err) {\r\n     console.error(err);\r\n@@ -183,371 +91,4 @@\n const PORT = process.env.PORT || 5000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server running on port ${PORT}`);\r\n });\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middlewaree);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n-      createdBy: req.admin.email,\r\n-      status: { $ne: 'DELETED' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.email\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    scheduleEventReminder(savedEvent)\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      { status: 'DELETED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middlewaree);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n-      createdBy: req.admin.email,\r\n-      status: { $ne: 'DELETED' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.email\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    scheduleEventReminder\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      { status: 'DELETED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middlewaree);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n-      createdBy: req.admin.email,\r\n-      status: { $ne: 'DELETED' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.email\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    \r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      { status: 'DELETED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n-require('dotenv').config();\r\n-const express = require('express');\r\n-const { connectDB, Event } = require('./db');\r\n-const authRoutes = require('./routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('./middleware/middleware'); \r\n-\r\n-const app = express();\r\n-\r\n-connectDB();\r\n-\r\n-app.use(cors({\r\n-  origin: 'http://localhost:3000',\r\n-  credentials: true\r\n-}));\r\n-\r\n-app.use(express.json());\r\n-app.use('/api/admin', authRoutes);\r\n-\r\n-\r\n-\r\n-app.use('/api/events', middlewaree);\r\n-\r\n-// ✅ GET all events by admin (not cancelled)\r\n-app.get('/api/events', async (req, res) => {\r\n-  try {\r\n-    const events = await Event.find({\r\n-      createdBy: req.admin.email,\r\n-      status: { $ne: 'DE' }\r\n-    });\r\n-    res.json(events);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error fetching events' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ POST create event with createdBy\r\n-app.post('/api/events', async (req, res) => {\r\n-  try {\r\n-    const newEvent = new Event({\r\n-      ...req.body,\r\n-      createdBy: req.admin.email\r\n-    });\r\n-    const savedEvent = await newEvent.save();\r\n-    res.status(201).json(savedEvent);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error creating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ PUT update event only if belongs to this admin\r\n-app.put('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      req.body,\r\n-      { new: true }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.json(event);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error updating event' });\r\n-  }\r\n-});\r\n-\r\n-// ✅ DELETE (soft delete) event\r\n-app.delete('/api/events/:id', async (req, res) => {\r\n-  try {\r\n-    const event = await Event.findOneAndUpdate(\r\n-      { _id: req.params.id, createdBy: req.admin.email },\r\n-      { status: 'DELETED' }\r\n-    );\r\n-    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Error deleting event' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n"
                },
                {
                    "date": 1753205469116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n       { _id: req.params.id, createdBy: req.admin.email },\r\n       req.body,\r\n       { new: true }\r\n     );\r\n-    scheduleEventReminder(savedEvent);\r\n+    scheduleEventReminder(event);\r\n     if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n     res.json(event);\r\n   } catch (err) {\r\n     console.error(err);\r\n"
                },
                {
                    "date": 1753457746620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \r\n \r\n app.use('/api/events', middlewaree);\r\n \r\n-// ✅ GET all events by admin (not deletedd)\r\n+// ✅ GET all events by admin (not deleted)\r\n app.get('/api/events', async (req, res) => {\r\n   try {\r\n     const events = await Event.find({\r\n       createdBy: req.admin.email,\r\n"
                },
                {
                    "date": 1753466668785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \r\n \r\n app.use('/api/events', middlewaree);\r\n \r\n-app.use('/api/', middlewaree);\r\n+app.use('/api/j', middlewaree);\r\n \r\n // ✅ GET all events by admin (not deleted)\r\n app.get('/api/events', async (req, res) => {\r\n   try {\r\n"
                }
            ],
            "date": 1751212586999,
            "name": "Commit-0",
            "content": "require('dotenv').config();\r\nconst express = require('express');\r\nconst connectDB = require('./db');\r\nconst authRoutes = require('./routes/auth');\r\n\r\nconst app = express();\r\nconnectDB();\r\n\r\napp.use(express.json());\r\napp.use('/api/admin', authRoutes);\r\n\r\napp.listen(process.env.PORT, () => {\r\n  console.log(`Server running on port ${process.env.PORT}`);\r\n});\r\n"
        }
    ]
}
{
    "sourceFile": "api/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1757006674986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757008053078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,149 @@\n-require('dotenv').config();\r\n const express = require('express');\r\n+const cors = require('cors');\r\n const { connectDB, Event, Job } = require('../db');\r\n-const authRoutes = require('../routes/auth');\r\n-const cors = require('cors');\r\n-const middlewaree = require('../middleware/middleware'); \r\n+const authMiddleware = require('../middleware/middleware');\r\n const { scheduleEventReminder } = require('../utils/reminderScheduler');\r\n-const serverless = require('serverless-http');\r\n \r\n const app = express();\r\n app.use(express.json());\r\n-app.use(cors({ origin: 'YOUR_FRONTEND_URL', methods: ['GET','POST','PUT','DELETE'], credentials: true }));\r\n+app.use(cors({\r\n+  origin: 'https://mvp-frontend-fgmsykyc5-exoessai123456-designs-projects.vercel.app',\r\n+  methods: ['GET', 'POST', 'PUT', 'DELETE'],\r\n+  credentials: true,\r\n+}));\r\n \r\n-app.get('/health', (req, res) => res.send('ok'));\r\n-app.use('/api/admin', authRoutes);\r\n-app.use('/api/events', middlewaree);\r\n-app.use('/api/jobs', middlewaree);\r\n+// Lazy DB connection for serverless\r\n+const ensureDB = async () => {\r\n+  if (!connectDB._connected) {\r\n+    await connectDB();\r\n+    connectDB._connected = true;\r\n+  }\r\n+};\r\n \r\n-// Example route\r\n-app.get('/api/events', async (req, res) => {\r\n-  await connectDB();\r\n-  const events = await Event.find({ createdBy: req.admin.email, status: { $ne: 'DELETED' } });\r\n-  res.json(events);\r\n+// Health check\r\n+app.get('/api/health', async (req, res) => {\r\n+  await ensureDB();\r\n+  res.send('ok');\r\n });\r\n \r\n-// other routes... same as before\r\n+// Auth routes\r\n+app.use('/api/admin', async (req, res, next) => {\r\n+  await ensureDB();\r\n+  authMiddleware(req, res, next);\r\n+});\r\n \r\n-module.exports = serverless(app); // replace app.listen()\r\n+// Event routes\r\n+app.use('/api/events', async (req, res, next) => {\r\n+  await ensureDB();\r\n+  authMiddleware(req, res, next);\r\n+  next();\r\n+});\r\n+\r\n+// Job routes\r\n+app.use('/api/jobs', async (req, res, next) => {\r\n+  await ensureDB();\r\n+  authMiddleware(req, res, next);\r\n+  next();\r\n+});\r\n+\r\n+// GET all events by admin (not deleted)\r\n+app.get('/api/events', authMiddleware, async (req, res) => {\r\n+  await ensureDB();\r\n+  try {\r\n+    const events = await Event.find({\r\n+      createdBy: req.admin.email,\r\n+      status: { $ne: 'DELETED' },\r\n+    });\r\n+    res.json(events);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error fetching events' });\r\n+  }\r\n+});\r\n+\r\n+// POST create event\r\n+app.post('/api/events', authMiddleware, async (req, res) => {\r\n+  await ensureDB();\r\n+  try {\r\n+    const newEvent = new Event({\r\n+      ...req.body,\r\n+      createdBy: req.admin.email,\r\n+    });\r\n+    const savedEvent = await newEvent.save();\r\n+    scheduleEventReminder(savedEvent);\r\n+    res.status(201).json(savedEvent);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating event' });\r\n+  }\r\n+});\r\n+\r\n+// PUT update event\r\n+app.put('/api/events/:id', authMiddleware, async (req, res) => {\r\n+  await ensureDB();\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      req.body,\r\n+      { new: true }\r\n+    );\r\n+    scheduleEventReminder(event);\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.json(event);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error updating event' });\r\n+  }\r\n+});\r\n+\r\n+// DELETE (soft delete) event\r\n+app.delete('/api/events/:id', authMiddleware, async (req, res) => {\r\n+  await ensureDB();\r\n+  try {\r\n+    const event = await Event.findOneAndUpdate(\r\n+      { _id: req.params.id, createdBy: req.admin.email },\r\n+      { status: 'DELETED' }\r\n+    );\r\n+    scheduleEventReminder(event);\r\n+    if (!event) return res.status(404).json({ message: 'Event not found or unauthorized' });\r\n+    res.status(204).end();\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error deleting event' });\r\n+  }\r\n+});\r\n+\r\n+// POST create job\r\n+app.post('/api/jobs', authMiddleware, async (req, res) => {\r\n+  await ensureDB();\r\n+  try {\r\n+    const newJob = new Job({\r\n+      ...req.body,\r\n+      sentTo: req.admin.email,\r\n+    });\r\n+    const savedJob = await newJob.save();\r\n+    res.status(201).json(savedJob);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Error creating job' });\r\n+  }\r\n+});\r\n+\r\n+// PUT update job\r\n+app.put('/api/jobs/:eventId', authMiddleware, async (req, res) => {\r\n+  await ensureDB();\r\n+  try {\r\n+    const job = await Job.findOneAndUpdate(\r\n+      { eventId: req.params.eventId },\r\n+      { $set: req.body },\r\n+      { new: true }\r\n+    );\r\n+    if (!job) return res.status(404).json({ error: 'Job not found' });\r\n+    res.json(job);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ error: 'Failed to update job' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = app; // Vercel treats this as a serverless function\r\n"
                }
            ],
            "date": 1757006674986,
            "name": "Commit-0",
            "content": "require('dotenv').config();\r\nconst express = require('express');\r\nconst { connectDB, Event, Job } = require('../db');\r\nconst authRoutes = require('../routes/auth');\r\nconst cors = require('cors');\r\nconst middlewaree = require('../middleware/middleware'); \r\nconst { scheduleEventReminder } = require('../utils/reminderScheduler');\r\nconst serverless = require('serverless-http');\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors({ origin: 'YOUR_FRONTEND_URL', methods: ['GET','POST','PUT','DELETE'], credentials: true }));\r\n\r\napp.get('/health', (req, res) => res.send('ok'));\r\napp.use('/api/admin', authRoutes);\r\napp.use('/api/events', middlewaree);\r\napp.use('/api/jobs', middlewaree);\r\n\r\n// Example route\r\napp.get('/api/events', async (req, res) => {\r\n  await connectDB();\r\n  const events = await Event.find({ createdBy: req.admin.email, status: { $ne: 'DELETED' } });\r\n  res.json(events);\r\n});\r\n\r\n// other routes... same as before\r\n\r\nmodule.exports = serverless(app); // replace app.listen()\r\n"
        }
    ]
}
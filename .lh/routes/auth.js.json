{
    "sourceFile": "routes/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1751212553314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751212616407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n const express = require('express');\r\n const router = express.Router();\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n-const Admin = require('../models/Admin');\r\n+const Admin = require('../models/admin');\r\n const auth = require('../middleware/authMiddleware');\r\n \r\n // POST /signup\r\n router.post('/signup', async (req, res) => {\r\n"
                },
                {
                    "date": 1751212765250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const router = express.Router();\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n const Admin = require('../models/admin');\r\n-const auth = require('../middleware/authMiddleware');\r\n+const auth = require('../middleware/iddleware');\r\n \r\n // POST /signup\r\n router.post('/signup', async (req, res) => {\r\n   const { email, password } = req.body;\r\n"
                },
                {
                    "date": 1752939751534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const router = express.Router();\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n const Admin = require('../models/admin');\r\n-const auth = require('../middleware/iddleware');\r\n+const auth = require('../middleware/middleware');\r\n \r\n // POST /signup\r\n router.post('/signup', async (req, res) => {\r\n   const { email, password } = req.body;\r\n@@ -16,9 +16,9 @@\n     const hashed = await bcrypt.hash(password, 10);\r\n     admin = new Admin({ email, password: hashed });\r\n     await admin.save();\r\n \r\n-    const token = jwt.sign({ admin: { id: admin.id } }, process.env.JWT_SECRET);\r\n+    const token = jwt.sign({ admin: { email: admin.id } }, process.env.JWT_SECRET);\r\n     res.json({ token });\r\n   } catch (err) {\r\n     res.status(500).send('Server error');\r\n   }\r\n"
                },
                {
                    "date": 1752939960530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     const hashed = await bcrypt.hash(password, 10);\r\n     admin = new Admin({ email, password: hashed });\r\n     await admin.save();\r\n \r\n-    const token = jwt.sign({ admin: { email: admin.id } }, process.env.JWT_SECRET);\r\n+    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n     res.json({ token });\r\n   } catch (err) {\r\n     res.status(500).send('Server error');\r\n   }\r\n@@ -43,9 +43,9 @@\n });\r\n \r\n // GET /profile (Protected)\r\n router.get('/profile', auth, async (req, res) => {\r\n-  const admin = await Admin.findById(req.admin.id).select('-password');\r\n+  const admin = await Admin.findById(req.admin.).select('-password');\r\n   res.json(admin);\r\n });\r\n \r\n module.exports = router;\r\n"
                },
                {
                    "date": 1752939973266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const bcrypt = require('bcryptjs');\r\n+const jwt = require('jsonwebtoken');\r\n+const Admin = require('../models/admin');\r\n+const auth = require('../middleware/middleware');\r\n+\r\n+// POST /signup\r\n+router.post('/signup', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    let admin = await Admin.findOne({ email });\r\n+    if (admin) return res.status(400).json({ msg: 'Admin already exists' });\r\n+\r\n+    const hashed = await bcrypt.hash(password, 10);\r\n+    admin = new Admin({ email, password: hashed });\r\n+    await admin.save();\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n+    res.json({ token });\r\n+  } catch (err) {\r\n+    res.status(500).send('Server error');\r\n+  }\r\n+});\r\n+\r\n+// POST /login\r\n+router.post('/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    const admin = await Admin.findOne({ email });\r\n+    if (!admin) return res.status(400).json({ msg: 'Invalid credentials' });\r\n+\r\n+    const isMatch = await bcrypt.compare(password, admin.password);\r\n+    if (!isMatch) return res.status(400).json({ msg: 'Invalid credentials' });\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.id } }, process.env.JWT_SECRET);\r\n+    res.json({ token });\r\n+  } catch (err) {\r\n+    res.status(500).send('Server error');\r\n+  }\r\n+});\r\n+\r\n+// GET /profile (Protected)\r\n+router.get('/profile', auth, async (req, res) => {\r\n+  const admin = await Admin.findById(req.admin.email).select('-password');\r\n+  res.json(admin);\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1752940405416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,69 +34,18 @@\n \r\n     const isMatch = await bcrypt.compare(password, admin.password);\r\n     if (!isMatch) return res.status(400).json({ msg: 'Invalid credentials' });\r\n \r\n-    const token = jwt.sign({ admin: { email: admin.id } }, process.env.JWT_SECRET);\r\n-    res.json({ token });\r\n-  } catch (err) {\r\n-    res.status(500).send('Server error');\r\n-  }\r\n-});\r\n-\r\n-// GET /profile (Protected)\r\n-router.get('/profile', auth, async (req, res) => {\r\n-  const admin = await Admin.findById(req.admin.email).select('-password');\r\n-  res.json(admin);\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-const bcrypt = require('bcryptjs');\r\n-const jwt = require('jsonwebtoken');\r\n-const Admin = require('../models/admin');\r\n-const auth = require('../middleware/middleware');\r\n-\r\n-// POST /signup\r\n-router.post('/signup', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n-\r\n-  try {\r\n-    let admin = await Admin.findOne({ email });\r\n-    if (admin) return res.status(400).json({ msg: 'Admin already exists' });\r\n-\r\n-    const hashed = await bcrypt.hash(password, 10);\r\n-    admin = new Admin({ email, password: hashed });\r\n-    await admin.save();\r\n-\r\n     const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n     res.json({ token });\r\n   } catch (err) {\r\n     res.status(500).send('Server error');\r\n   }\r\n });\r\n \r\n-// POST /login\r\n-router.post('/login', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n-\r\n-  try {\r\n-    const admin = await Admin.findOne({ email });\r\n-    if (!admin) return res.status(400).json({ msg: 'Invalid credentials' });\r\n-\r\n-    const isMatch = await bcrypt.compare(password, admin.password);\r\n-    if (!isMatch) return res.status(400).json({ msg: 'Invalid credentials' });\r\n-\r\n-    const token = jwt.sign({ admin: { id: admin.id } }, process.env.JWT_SECRET);\r\n-    res.json({ token });\r\n-  } catch (err) {\r\n-    res.status(500).send('Server error');\r\n-  }\r\n-});\r\n-\r\n // GET /profile (Protected)\r\n router.get('/profile', auth, async (req, res) => {\r\n-  const admin = await Admin.findById(req.admin.).select('-password');\r\n+  const admin = await Admin.findBy(req.admin.email).select('-password');\r\n   res.json(admin);\r\n });\r\n \r\n module.exports = router;\r\n"
                },
                {
                    "date": 1752940426008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n });\r\n \r\n // GET /profile (Protected)\r\n router.get('/profile', auth, async (req, res) => {\r\n-  const admin = await Admin.findBy(req.admin.email).select('-password');\r\n+  const admin = await Admin.findByE(req.admin.email).select('-password');\r\n   res.json(admin);\r\n });\r\n \r\n module.exports = router;\r\n"
                },
                {
                    "date": 1752940709736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n });\r\n \r\n // GET /profile (Protected)\r\n router.get('/profile', auth, async (req, res) => {\r\n-  const admin = await Admin.findByE(req.admin.email).select('-password');\r\n+  const admin = await Admin.findById(req.admin.email).select('-password');\r\n   res.json(admin);\r\n });\r\n \r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753458709608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \r\n // GET /profile (Protected)\r\n router.get('/profile', auth, async (req, res) => {\r\n   const admin = await Admin.findByEmail(req.admin.email).select('-password');\r\n-  const username\r\n+  const username=\r\n   res.json(admin);\r\n });\r\n \r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753458748559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const bcrypt = require('bcryptjs');\r\n+const jwt = require('jsonwebtoken');\r\n+const Admin = require('../models/admin');\r\n+const auth = require('../middleware/middleware');\r\n+\r\n+// POST /signup\r\n+router.post('/signup', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    let admin = await Admin.findOne({ email });\r\n+    if (admin) return res.status(400).json({ msg: 'Admin already exists' });\r\n+\r\n+    const hashed = await bcrypt.hash(password, 10);\r\n+    admin = new Admin({ email, password: hashed });\r\n+    await admin.save();\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n+    res.json({ token });\r\n+  } catch (err) {\r\n+    res.status(500).send('Server error');\r\n+  }\r\n+});\r\n+\r\n+// POST /login\r\n+router.post('/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    const admin = await Admin.findOne({ email });\r\n+    if (!admin) return res.status(400).json({ msg: 'Invalid credentials' });\r\n+\r\n+    const isMatch = await bcrypt.compare(password, admin.password);\r\n+    if (!isMatch) return res.status(400).json({ msg: 'Invalid credentials' });\r\n+\r\n+    const token = jwt.sign({ admin: { email: admin.email } }, process.env.JWT_SECRET);\r\n+    res.json({ token });\r\n+  } catch (err) {\r\n+    res.status(500).send('Server error');\r\n+  }\r\n+});\r\n+\r\n+// GET /profile (Protected)\r\n+router.get('/profile', auth, async (req, res) => {\r\n+  const admin = await Admin.findByEmail(req.admin.email).select('-password');\r\n+  const username=.email?.split('@')[0]\r\n+  res.json(admin);\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                }
            ],
            "date": 1751212553314,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst Admin = require('../models/Admin');\r\nconst auth = require('../middleware/authMiddleware');\r\n\r\n// POST /signup\r\nrouter.post('/signup', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    let admin = await Admin.findOne({ email });\r\n    if (admin) return res.status(400).json({ msg: 'Admin already exists' });\r\n\r\n    const hashed = await bcrypt.hash(password, 10);\r\n    admin = new Admin({ email, password: hashed });\r\n    await admin.save();\r\n\r\n    const token = jwt.sign({ admin: { id: admin.id } }, process.env.JWT_SECRET);\r\n    res.json({ token });\r\n  } catch (err) {\r\n    res.status(500).send('Server error');\r\n  }\r\n});\r\n\r\n// POST /login\r\nrouter.post('/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const admin = await Admin.findOne({ email });\r\n    if (!admin) return res.status(400).json({ msg: 'Invalid credentials' });\r\n\r\n    const isMatch = await bcrypt.compare(password, admin.password);\r\n    if (!isMatch) return res.status(400).json({ msg: 'Invalid credentials' });\r\n\r\n    const token = jwt.sign({ admin: { id: admin.id } }, process.env.JWT_SECRET);\r\n    res.json({ token });\r\n  } catch (err) {\r\n    res.status(500).send('Server error');\r\n  }\r\n});\r\n\r\n// GET /profile (Protected)\r\nrouter.get('/profile', auth, async (req, res) => {\r\n  const admin = await Admin.findById(req.admin.id).select('-password');\r\n  res.json(admin);\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}
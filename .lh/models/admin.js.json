{
    "sourceFile": "models/admin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1751212504230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751217325115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,22 @@\n+// models/Admin.js\r\n const mongoose = require('mongoose');\r\n+const bcrypt = require('bcryptjs');\r\n \r\n const AdminSchema = new mongoose.Schema({\r\n   email: { type: String, required: true, unique: true },\r\n   password: { type: String, required: true },\r\n });\r\n\\ No newline at end of file\n \r\n-module.exports = mongoose.model('Admin', AdminSchema);\n+// Hash password before saving\r\n+AdminSchema.pre('save', async function (next) {\r\n+  if (!this.isModified('password')) return next();\r\n+  this.password = await bcrypt.hash(this.password, 10);\r\n+  next();\r\n+});\r\n+\r\n+// Optional: add method to compare passwords\r\n+AdminSchema.methods.comparePassword = function (plainPassword) {\r\n+  return bcrypt.compare(plainPassword, this.password);\r\n+};\r\n+\r\n+module.exports = mongoose.model('Admin', AdminSchema);\r\n"
                },
                {
                    "date": 1751217367181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// models/Admin.js\r\n+\r\n const mongoose = require('mongoose');\r\n const bcrypt = require('bcryptjs');\r\n \r\n const AdminSchema = new mongoose.Schema({\r\n@@ -18,5 +18,5 @@\n AdminSchema.methods.comparePassword = function (plainPassword) {\r\n   return bcrypt.compare(plainPassword, this.password);\r\n };\r\n \r\n-module.exports = mongoose.model('Admin', AdminSchema);\n\\ No newline at end of file\n+module.exports = mongoose.model('Admin', AdminSchema);\r\n"
                },
                {
                    "date": 1751217389082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+const mongoose = require('mongoose');\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const AdminSchema = new mongoose.Schema({\r\n+  email: { type: String, required: true, unique: true },\r\n+  password: { type: String, required: true },\r\n+});\r\n+\r\n+// Hash password before saving\r\n+AdminSchema.pre('save', async function (next) {\r\n+  if (!this.isModified('password')) return next();\r\n+  this.password = await bcrypt.hash(this.password, 10);\r\n+  next();\r\n+});\r\n+\r\n+AdminSchema.methods.comparePassword = function (plainPassword) {\r\n+  return bcrypt.compare(plainPassword, this.password);\r\n+};\r\n+\r\n+module.exports = mongoose.model('Admin', AdminSchema);\r\n"
                },
                {
                    "date": 1751217396752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+const mongoose = require('mongoose');\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const AdminSchema = new mongoose.Schema({\r\n+  email: { type: String, required: true, unique: true },\r\n+  password: { type: String, required: true },\r\n+});\r\n+\r\n+// Hash password before saving\r\n+AdminSchema.pre('save', async function (next) {\r\n+  if (!this.isModified('password')) return next();\r\n+  this.password = await bcrypt.hash(this.password, 10);\r\n+  next();\r\n+});\r\n+\r\n+z\r\n+AdminSchema.methods.comparePassword = function (plainPassword) {\r\n+  return bcrypt.compare(plainPassword, this.password);\r\n+};\r\n+\r\n+module.exports = mongoose.model('Admin', AdminSchema);\r\n"
                },
                {
                    "date": 1752938495410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n \r\n const AdminSchema = new mongoose.Schema({\r\n   email: { type: String, required: true, unique: true },\r\n   password: { type: String, required: true },\r\n+  \r\n });\r\n \r\n // Hash password before saving\r\n AdminSchema.pre('save', async function (next) {\r\n@@ -12,50 +13,8 @@\n   this.password = await bcrypt.hash(this.password, 10);\r\n   next();\r\n });\r\n \r\n-z\r\n-AdminSchema.methods.comparePassword = function (plainPassword) {\r\n-  return bcrypt.compare(plainPassword, this.password);\r\n-};\r\n-\r\n-module.exports = mongoose.model('Admin', AdminSchema);\r\n-const mongoose = require('mongoose');\r\n-const bcrypt = require('bcryptjs');\r\n-\r\n-const AdminSchema = new mongoose.Schema({\r\n-  email: { type: String, required: true, unique: true },\r\n-  password: { type: String, required: true },\r\n-});\r\n-\r\n-// Hash password before saving\r\n-AdminSchema.pre('save', async function (next) {\r\n-  if (!this.isModified('password')) return next();\r\n-  this.password = await bcrypt.hash(this.password, 10);\r\n-  next();\r\n-});\r\n-\r\n-AdminSchema.methods.comparePassword = function (plainPassword) {\r\n-  return bcrypt.compare(plainPassword, this.password);\r\n-};\r\n-\r\n-module.exports = mongoose.model('Admin', AdminSchema);\r\n-\r\n-const mongoose = require('mongoose');\r\n-const bcrypt = require('bcryptjs');\r\n-\r\n-const AdminSchema = new mongoose.Schema({\r\n-  email: { type: String, required: true, unique: true },\r\n-  password: { type: String, required: true },\r\n-});\r\n-\r\n-// Hash password before saving\r\n-AdminSchema.pre('save', async function (next) {\r\n-  if (!this.isModified('password')) return next();\r\n-  this.password = await bcrypt.hash(this.password, 10);\r\n-  next();\r\n-});\r\n-\r\n // Optional: add method to compare passwords\r\n AdminSchema.methods.comparePassword = function (plainPassword) {\r\n   return bcrypt.compare(plainPassword, this.password);\r\n };\r\n"
                },
                {
                    "date": 1752938537088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+const mongoose = require('mongoose');\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const AdminSchema = new mongoose.Schema({\r\n+  email: { type: String, required: true, unique: true },\r\n+  password: { type: String, required: true },\r\n+  \r\n+});\r\n+\r\n+// Hash password before saving\r\n+AdminSchema.pre('save', async function (next) {\r\n+  if (!this.isModified('password')) return next();\r\n+  this.password = await bcrypt.hash(this.password, 10);\r\n+  next();\r\n+});\r\n+\r\n+// Optional: add method to compare passwords\r\n+AdminSchema.methods.comparePassword = function (plainPassword) {\r\n+  return bcrypt.compare(plainPassword, this.password);\r\n+};\r\n+\r\n+module.exports = mongoose.model('Admin', AdminSchema);\r\n"
                },
                {
                    "date": 1752938543488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,32 +2,10 @@\n const bcrypt = require('bcryptjs');\r\n \r\n const AdminSchema = new mongoose.Schema({\r\n   email: { type: String, required: true, unique: true },\r\n-  password: { type: String, required: true },\r\n   \r\n-});\r\n-\r\n-// Hash password before saving\r\n-AdminSchema.pre('save', async function (next) {\r\n-  if (!this.isModified('password')) return next();\r\n-  this.password = await bcrypt.hash(this.password, 10);\r\n-  next();\r\n-});\r\n-\r\n-// Optional: add method to compare passwords\r\n-AdminSchema.methods.comparePassword = function (plainPassword) {\r\n-  return bcrypt.compare(plainPassword, this.password);\r\n-};\r\n-\r\n-module.exports = mongoose.model('Admin', AdminSchema);\r\n-const mongoose = require('mongoose');\r\n-const bcrypt = require('bcryptjs');\r\n-\r\n-const AdminSchema = new mongoose.Schema({\r\n-  email: { type: String, required: true, unique: true },\r\n   password: { type: String, required: true },\r\n-  \r\n });\r\n \r\n // Hash password before saving\r\n AdminSchema.pre('save', async function (next) {\r\n"
                },
                {
                    "date": 1752938551154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n const AdminSchema = new mongoose.Schema({\r\n   email: { type: String, required: true, unique: true },\r\n   password: { type: String, required: true },\r\n-  password: { type: String, required: true },\r\n+  user: { type: String, required: true },\r\n   \r\n });\r\n \r\n // Hash password before saving\r\n"
                },
                {
                    "date": 1752938557347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+const mongoose = require('mongoose');\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const AdminSchema = new mongoose.Schema({\r\n+  email: { type: String, required: true, unique: true },\r\n+  password: { type: String, required: true },\r\n+  username: { type: String, required: true },\r\n+});\r\n+\r\n+// Hash password before saving\r\n+AdminSchema.pre('save', async function (next) {\r\n+  if (!this.isModified('password')) return next();\r\n+  this.password = await bcrypt.hash(this.password, 10);\r\n+  next();\r\n+});\r\n+\r\n+// Optional: add method to compare passwords\r\n+AdminSchema.methods.comparePassword = function (plainPassword) {\r\n+  return bcrypt.compare(plainPassword, this.password);\r\n+};\r\n+\r\n+module.exports = mongoose.model('Admin', AdminSchema);\r\n"
                }
            ],
            "date": 1751212504230,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\r\n\r\nconst AdminSchema = new mongoose.Schema({\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n});\r\n\r\nmodule.exports = mongoose.model('Admin', AdminSchema);"
        }
    ]
}